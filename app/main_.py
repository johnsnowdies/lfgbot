import telebot
import re
import datetime
from settings import tg_api_key, tg_chat
from repository import EventRepository, ParticipantRepository, UserRepository

bot = telebot.TeleBot(str(tg_api_key), parse_mode="HTML")


def get_join_keyboard():
    keyboard_join = telebot.types.InlineKeyboardMarkup(row_width=1)
    key_approve = telebot.types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è/–°–ª–∏—Ç—å—Å—è', callback_data='join')
    keyboard_join.add(key_approve)
    return keyboard_join


def send_direct(chat, message):
    try:
        bot.send_message(chat, message)
    except:
        pass


@bot.message_handler(commands=['mute'])
def mute_user(message):
    telegram_tag = message.from_user.username

    if not telegram_tag:
        faq_url = 'https://telegram.org/faq#q-what-are-usernames-how-do-i-get-one'
        msg = f'–ß—Ç–æ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, <a href="{faq_url}">–Ω–∞—Å—Ç—Ä–æ–π</a> –Ω–∏–∫–Ω–µ–π–º'
        send_direct(message.from_user.id, msg)
        return

    ur = UserRepository()
    user = ur.get_user(tg=telegram_tag)
    if not user:
        return

    mute = user.get("fields").get("mute", None)

    if mute:
        ur.toggle_mute(telegram_tag, False)
        bot.reply_to(message, '<strong>–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º</strong> –æ—Ç–∫–ª—é—á–µ–Ω.')
    else:
        ur.toggle_mute(telegram_tag, True)
        bot.reply_to(message, '<strong>–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º</strong> –≤–∫–ª—é—á–µ–Ω.')


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    ur = UserRepository()

    reply = '<b>–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã</b>\n\n'
    reply += 'üëë<b>–ï—Å–ª–∏ –≤—ã –∏—â–µ—Ç–µ –µ—â–µ –ª—é–¥–µ–π:</b>\n\n'
    reply += '–≤–≤–æ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <u>/lfg</u>, –≤–æ—Ç –µ–µ —Ñ–æ—Ä–º–∞—Ç: \n\n'
    reply += '<code>/lfg [–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ] +N [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è –º—Å–∫]</code>\n\n'
    reply += '–ù–∞–ø—Ä–∏–º–µ—Ä:\n\n'
    reply += '<code>/lfg –≤–æ–≥ –º–∞—Å—Ç–µ—Ä +5 25.08.2021 17:00</code>\n\n'
    reply += '<code>–í–º–µ—Å—Ç–æ –¥–∞—Ç—ã –≤—ã –º–æ–∂–µ—Ç–µ</code> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞ ‚Äò–∑–∞–≤—Ç—Ä–∞‚Äô, ‚Äò—Å–µ–≥–æ–¥–Ω—è‚Äô –∏–ª–∏ ‚Äò—Å–µ–π—á–∞—Å‚Äô\n\n'
    reply += 'üí™<b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ:</b>\n\n'
    reply += '–ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–∞—Å –ø–æ—Å—Ç–æ–º. –Ø –±–æ—Ç —É–º–Ω—ã–π, –Ω–æ –º–Ω–µ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞, ' \
             '—Ç–∞–∫ —á—Ç–æ –∂–º–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥. –°–ø–∞–º–∏—Ç—å –Ω–µ –Ω–∞–¥–æ :)\n\n '
    reply += '‚ö†Ô∏è–í–∞–∂–Ω–æ–µ:\n\n'
    reply += '–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç—Ä–∞–∂–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∏–∫–Ω–µ–π–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ.\n\n'
    reply += '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏ –≤ –õ–° @gfm_lfg_bot –∫–æ–º–∞–Ω–¥—É <code>/start</code>\n\n'
    reply += '–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ <code>/mute</code>\n\n'
    reply += '‚ò†Ô∏è<b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞</b>: –µ—Å–ª–∏ –ª–∏–¥–µ—Ä –Ω–∞–∂–º–µ—Ç "–°–ª–∏—Ç—å—Å—è", –º–µ—Ä–æ–ø—Ä–∏—è—Ç–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ!\n\n'
    reply += '–£–¥–∞—á–∏ –≤ –±–æ—é!'

    telegram_tag = message.from_user.username
    if telegram_tag:
        user = ur.get_user(tg=telegram_tag)
        if not user:
            ur.add_user(tg_chat_id=message.from_user.id, tg=telegram_tag)

    # bot.reply_to(message, reply)
    send_direct(message.from_user.id, reply)


@bot.callback_query_handler(lambda call: call.data in ['join'])
def prove_callback(call):
    telegram_tag = call.from_user.username

    if not telegram_tag:
        faq_url = 'https://telegram.org/faq#q-what-are-usernames-how-do-i-get-one'
        msg = f'–ß—Ç–æ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, <a href="{faq_url}">–Ω–∞—Å—Ç—Ä–æ–π</a> –Ω–∏–∫–Ω–µ–π–º'
        send_direct(call.from_user.id, msg)
        return

    pr = ParticipantRepository()
    er = EventRepository()
    ur = UserRepository()

    event = er.get_event(tg_post_id=call.message.message_id)
    if not event:
        return

    event_id = event.get('id')
    event_data = event.get('fields')
    disc = event_data.get("disc", None)

    leader_user = ur.get_user(tg=event_data.get("tg"))
    mute = leader_user.get("fields").get("mute", None)

    date = datetime.datetime.strptime(event_data.get("date"), '%Y-%m-%dT%H:%M:%S.%fZ')

    participants = pr.get_event_participants(tg_post_id=call.message.message_id)
    slots = int(event_data.get("slots"))

    deleted = False

    reply_list = ''

    if event_data.get("tg") == telegram_tag:
        if not mute:
            send_direct(call.from_user.id, '–¢—ã —Å–ª–∏–ª—Å—è, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ')

        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        er.delete(record=event_id)
        return

    participants_list = list()

    if participants:
        for p in participants:
            user = p.get('fields').get('tg')

            if user == telegram_tag:
                record = p.get('id')
                pr.del_participant(record=record)
                deleted = True

                if leader_user and not mute:
                    leader_msg = f'–° –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <code>{event_data.get("name")}</code> —Å–ª–∏–ª—Å—è @{telegram_tag}'
                    send_direct(leader_user.get("fields").get("tg_chat_id"), leader_msg)
            else:
                participants_list.append(user)
                reply_list += f'@{user}\n'

    free_space = slots - len(participants_list)

    if not deleted and free_space > 0:
        pr.add_participant(event_id=event_id, tg=telegram_tag, tg_post_id=call.message.message_id)
        reply_list += f'@{telegram_tag}\n'
        free_space -= 1

        if leader_user and not mute:
            leader_msg = f'–ù–∞ –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <code>{event_data.get("name")}</code> –∑–∞–ø–∏—Å–∞–ª—Å—è @{telegram_tag}'
            send_direct(leader_user.get("fields").get("tg_chat_id"), leader_msg)

    reply = f'<b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {event_data.get("name")}\n'
    reply += f'<b>–ú–µ—Å—Ç:</b> {free_space}\n'
    reply += f'<b>–ö–æ–≥–¥–∞:</b> {date.strftime("%d.%m.%Y, %H:%M")} –ú–°–ö\n'
    reply += f'<b>–õ–∏–¥–µ—Ä:</b> @{event_data.get("tg")}\n'
    if disc:
        reply += f'<b>Discord:</b> <a href="https://{disc}">{disc}</a>\n'

    if reply_list:
        reply += f'<b>–ó–∞–ø–∏—Å–∞–ª–∏—Å—å:</b>\n'
        reply += reply_list

    if reply != call.message.message_id:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=reply,
            reply_markup=get_join_keyboard()
        )


@bot.message_handler(commands=['lfg'])
def lfg(message):
    event_rep = EventRepository()
    text = message.text[5:]

    reg_name_stack = r'^(.*)\+([0-9]+)'
    reg_date = r'[0-3]{0,1}[0-9]\.[0-1]{0,1}[0-9]\.[0-9]{2,4}'
    reg_time = r'(([01]\d|2[0-3]):([0-5]\d)|24:00)'
    reg_disc = r'discord.gg/(.*)'

    # –¥–æ—Å—Ç–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (-1)
    q = re.search(reg_name_stack, text)
    leader = message.from_user.username

    if not q:
        bot.reply_to(message, '–°—Ç—Ä–∞–∂, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /lfg [–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ] +N [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è]')
        return

    if not leader:
        faq_url = 'https://telegram.org/faq#q-what-are-usernames-how-do-i-get-one'
        bot.reply_to(message, f'–ß—Ç–æ –±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, <a href="{faq_url}">–Ω–∞—Å—Ç—Ä–æ–π</a> –Ω–∏–∫–Ω–µ–π–º')
        return

    name = q.group(1)
    slots = int(q.group(2))

    if slots > 12:
        slots = 12

    if slots < 1:
        bot.reply_to(message, '–°—Ç—Ä–∞–∂, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /lfg [–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ] +N [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è]')
        return

    # –¥–æ—Å—Ç–∞–µ–º –¥–∞—Ç—É
    date_query = re.search(reg_date, text)
    now = False

    if date_query:
        date = datetime.datetime.strptime(date_query.group(0), '%d.%m.%Y')
    elif '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' in text:
        date = datetime.datetime.today() + datetime.timedelta(days=2)
    elif '–∑–∞–≤—Ç—Ä–∞' in text:
        date = datetime.datetime.today() + datetime.timedelta(days=1)
    else:
        tzinfo = datetime.timezone(datetime.timedelta(hours=+3))
        date = datetime.datetime.now(tzinfo)
        now = True

    # –¥–æ—Å—Ç–∞–µ–º –≤—Ä–µ–º—è
    time_query = re.search(reg_time, text)

    if time_query:
        now = False
        hour = int(time_query.group(2))
        minute = int(time_query.group(3))
        date = date.replace(hour=hour, minute=minute)

    if not now and not time_query:
        bot.reply_to(message, '–°—Ç—Ä–∞–∂, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /lfg [–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ] +N [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è]')
        return

    # discord
    disc_query = re.search(reg_disc, text)

    reply = f'<b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {name}\n'
    reply += f'<b>–ú–µ—Å—Ç:</b> {slots}\n'
    reply += f'<b>–ö–æ–≥–¥–∞:</b> üî•–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å!üî•\n' if now else f'<b>–ö–æ–≥–¥–∞:</b> {date.strftime("%d.%m.%Y, %H:%M")} –ú–°–ö\n'
    reply += f'<b>–õ–∏–¥–µ—Ä:</b> @{leader}\n'
    disc = ""
    if disc_query:
        disc = disc_query.group(0)
        reply += f'<b>Discord:</b> <a href="https://{disc}">{disc}</a>\n'

    ms = bot.send_message(tg_chat, reply, reply_markup=get_join_keyboard())
    event_rep.add_event(name=name, slots=slots, date=date, tg_post_id=ms.message_id, tg=leader, disc=disc)


if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0)
